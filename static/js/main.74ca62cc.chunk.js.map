{"version":3,"sources":["connect-four-brain/index.ts","hooks/useWindowSize.ts","App.js","serviceWorker.js","index.js"],"names":["getEmptyBoard","width","arguments","length","undefined","height","Array","fill","map","v","getNextBoard","_ref","board","token","_ref2","Object","slicedToArray","column","row","slice","concat","useWindowSize","_useState","useState","window","innerWidth","_useState2","setWidth","_useState3","innerHeight","_useState4","setHeight","useEffect","handleResize","addEventListener","removeEventListener","App","updateBoard","currentTurn","nextTurn","_useState5","_useState6","isGameover","gameover","_useWindowSize","screenWidth","screenHeight","players","name","id","className","_useMemo","useMemo","boardWidth","boardHeight","sizes","size","Math","floor","unit","divisor","tokenSize","min","apply","toConsumableArray","tokenSizeObj","reduce","acc","idx","percentage","full","half","getTokenSize","columns","rows","tokenHalfSize","tokenStyles","newGame","e","getHandleClick","emptyLocation","indexOf","Error","addToColumn","nextBoard","objectSpread","win","location","streakLen","_location","AddMethod","directions","j","vectors","i","streak","addMethod","push","currentVector","pop","offsetColumn","offsetRow","unshift","findWin","forEach","locationTuple","winner","react_default","a","createElement","columnNumber","style","borderRadius","key","onClick","reverse","rowNum","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.74ca62cc.chunk.js","sourcesContent":["interface Board extends Array<any[]> {}\ninterface LocationTuple extends Array<number> {0: number, 1: number}\ninterface Token {id: string}\n\nexport function getEmptyBoard(width: number = 7, height:number = 6):Board {\n\treturn new Array(width).fill(null).map(v => new Array(height).fill(null));\n}\n\nexport function getNextBoard([column, row]:LocationTuple, board:Board, token:Token):Board {\n\treturn board.slice(0, column).concat([\n\t\t\tboard[column].slice(0, row).concat([ token ]).concat(board[column].slice(row + 1))\n\t\t]).concat(board.slice(column + 1));\n}\n\nexport function addToColumn(column:number, board:Board):LocationTuple {\n\tconst row = board[column].indexOf(null);\n\tif(row === -1) {\n\t\tthrow new Error('No empty spaces in this column');\n\t}\n\treturn [column, row];\n}\n\nexport function findWin(location:LocationTuple, board:Board, streakLen:number = 4) {\n\tconst [ column, row ] = location;\n\tconst token:Token|null = board[column][row];\n\tif(token === null) {\n\t\treturn [];\n\t}\n\tconst directions:LocationTuple[][] = [\n\t\t[[0, 1], [0, -1]], [[-1, 0], [1, 0]],  // Vertical, Horizontal\n\t\t[[-1, 1], [1, -1]], [[-1, -1], [1, 1]] // Diagonal\n\t];\n\n\tenum AddMethod {push = 'push', unshift = 'unshift'};\n\n\tfor(let j = 0; j < directions.length; j++) {\n\t\tconst vectors:LocationTuple[] = directions[j];\n\t\tlet i = 1, streak = [location], addMethod = AddMethod.push;\n\t\twhile(streak.length < streakLen && vectors.length > 0) {\n\t\t\tconst currentVector = vectors.pop();\n\t\t\tif(!currentVector) {\n\t\t\t\tthrow new Error('Vector cannot be undefined');\n\t\t\t}\n\t\t\tconst [ offsetColumn, offsetRow ] = [\n\t\t\t\tlocation[0] + (currentVector[0] * i),\n\t\t\t\tlocation[1] + (currentVector[1] * i)\n\t\t\t];\n\t\t\tconst inBounds = (\n\t\t\t\t(offsetColumn >= 0 && offsetColumn < board.length) && \n\t\t\t\t(offsetRow >= 0 && offsetRow < board[offsetColumn].length)\n\t\t\t);\n\n\t\t\tif(inBounds && board[offsetColumn][offsetRow] !== null && board[offsetColumn][offsetRow].id === token.id) {\n\t\t\t\tstreak[addMethod]([offsetColumn, offsetRow]);\n\t\t\t\tvectors.push(currentVector);\n\t\t\t\ti++;\n\t\t\t} else {\n\t\t\t\ti = 1;\n\t\t\t\taddMethod = AddMethod.unshift;\n\t\t\t}\n\t\t}\n\n\t\tif(streak.length === 4) {\n\t\t\treturn streak;\n\t\t}\n\t}\n\treturn [];\n}\n","import { useState, useEffect } from 'react';\n\nfunction useWindowSize() {\n  const [ width, setWidth ] = useState(window.innerWidth);\n  const [ height, setHeight ] = useState(window.innerHeight);\n  \n  useEffect(() => {\n    const handleResize = () => {\n      setWidth(window.innerWidth);\n      setHeight(window.innerHeight);\n    };\n    window.addEventListener('resize', handleResize);\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  });\n  \n  return { width, height };\n}\n\nexport default useWindowSize;\n","import React, { useState, useMemo } from 'react';\nimport './App.css';\nimport { getEmptyBoard, getNextBoard, addToColumn, findWin } from './connect-four-brain/index.ts';\nimport useWindowSize from './hooks/useWindowSize.ts';\n\nfunction App() {\n  const columns = 7, rows = 6, streakLen = 4;\n  const [ board, updateBoard ] = useState(getEmptyBoard(columns, rows, streakLen));\n  const [ currentTurn, nextTurn ] = useState(0);\n  const [ isGameover, gameover ] = useState(false);\n  const { width:screenWidth, height:screenHeight } = useWindowSize();\n\n  const players = [\n    {name: 'Red', id: '0', className: 'token--red'},\n    {name: 'Black', id: '1', className: 'token--black'}\n  ];\n\n  const { full:tokenSize, half:tokenHalfSize } = useMemo(\n    () => getTokenSize(columns + 1, rows + 1, screenWidth, screenHeight), \n    [columns, rows, screenWidth, screenHeight]\n  );\n  const tokenStyles = {width: tokenSize, height: tokenSize};\n\n  const newGame = (e) => {\n    updateBoard(getEmptyBoard());\n    gameover(false);\n  };\n\n  const getHandleClick = (idx) => (e) => {\n    try {\n      const emptyLocation = addToColumn(idx, board);\n      const token = players[currentTurn];\n      let nextBoard = getNextBoard(emptyLocation, board, {...token});\n      const win = findWin(emptyLocation, nextBoard);\n      if(win.length === 4) {\n        gameover(true);\n        win.forEach((locationTuple) => {\n          nextBoard = getNextBoard(locationTuple, nextBoard, {...token, winner: true});\n        });\n        // Show a popup maybe?\n      }\n      updateBoard(nextBoard);\n      nextTurn(currentTurn + 1 === players.length ? 0 : currentTurn + 1);\n    } catch(e) {\n      // Show a popup maybe?\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"board\">\n        {board.map((column, columnNumber) => \n          <button \n            className=\"board__column\" \n            style={{borderRadius: tokenHalfSize}}\n            key={`column-${columnNumber}`}\n            onClick={isGameover ? newGame : getHandleClick(columnNumber)}\n          >\n            {column.slice().reverse().map(\n              (token, rowNum) => \n                <div \n                  style={tokenStyles} \n                  className={`token ${token !== null && token.className} ${isGameover && 'token--gameover'} ${token !== null && token.winner && 'token--winner'}`} \n                  key={rowNum}\n                >\n                </div>\n            )}\n          </button>\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction getTokenSize(boardWidth, boardHeight, screenWidth, screenHeight) {\n  const sizes = [\n    {size: Math.floor(screenWidth / boardWidth), unit: 'vw', divisor: screenWidth}, \n    {size: Math.floor(screenHeight / boardHeight), unit: 'vh', divisor: screenHeight}\n  ];\n  const tokenSize = Math.min(...sizes.map(({size}) => size));\n  const tokenSizeObj = sizes.reduce((acc, {size, unit, divisor}, idx) => {\n    if(size === tokenSize) {\n      const percentage = Math.floor((tokenSize / divisor) * 100);\n      return { size, unit, percentage };\n    }\n    return acc;\n  }, null);\n  const full = `${tokenSizeObj.percentage}${tokenSizeObj.unit}`;\n  const half = `${tokenSizeObj.percentage / 2}${tokenSizeObj.unit}`;\n  return { full, half };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}